Файл: mainMeny.py
Назначение:
Главный исполняемый файл приложения. Отвечает за запуск программы, отображение главного меню, обработку высокоуровневых состояний игры (меню, экран победы) и инициализацию основных игровых компонентов.

Основные компоненты и логика:

Инициализация:
pygame.init(): Инициализирует все модули библиотеки Pygame.
screen: Создает главное игровое окно размером 600x600 пикселей.
clock: Создает объект для контроля частоты кадров.

Ресурсы:
back_ground: Загружает и масштабирует фоновое изображение для главного меню.
star_game_button: Загружает и масштабирует изображение кнопки "Начать игру".
win_black_image, win_white_image: Загружают и масштабируют изображения-заставки для победных экранов (когда выигрывают черные или белые фишки соответственно).

Главный игровой цикл (while running):
Отрисовка: На каждой итерации отображается фон и кнопка "Начать игру".

Обработка ввода:
Проверяет, находится ли курсор мыши над кнопкой и была ли нажата левая кнопка мыши.
При клике на кнопку вызывается функция start_game(screen, clock), которая запускает основную игровую сессию.

Обработка результата игры:
Функция start_game() возвращает строку-победителя ("Black" или "White").
В зависимости от результата, фон главного меню меняется на соответствующую победную заставку.

Выход: Обрабатывает событие закрытия окна (pygame.QUIT), корректно завершая работу приложения.

Взаимодействие с другими модулями:
from Game import *: Импортирует логику игры (игровое поле, фишки, правила).
from GameControl import *: Импортирует модуль управления игровым процессом, в частности, функцию start_game, которая содержит основной игровой цикл.

Краткое описание работы:
Файл main.py является точкой входа в приложение. Он показывает меню, а после запуска игры и ее завершения возвращает пользователя в меню, но уже с изображением, объявляющим победителя.
------------------------------------------------------------------------------------------
Файл: GameControl.py
Назначение:
Модуль управления игровым процессом. Содержит основной игровой цикл и функции для управления состоянием игры, обработки событий, проверки условий победы и отрисовки игровых компонентов.

Основные функции:
start_game(my_screen, my_clock)

Вход: получает экран и часы из главного меню

Выход: возвращает цвет победителя ("Black"/"White") в главное меню

Логика: создает объект состояния игры и запускает основной игровой цикл
initialize_game(game_state)
Инициализирует игровые компоненты:
Загружает и масштабирует изображение доски
Создает объект кубика
Инициализирует начальные позиции фишек
Создает кнопку пропуска хода
Устанавливает флаг выполнения хода
handle_events(game_state, cube)
Обрабатывает события ввода:
Закрытие окна (корректный выход)
Нажатие 'E' - бросок кубиков (если еще не брошены)
Нажатие 'ESC' - выход из игры без победителя
Возвращает "None" при нажатии ESC для выхода
check_game_over(game_state)
Проверяет условия завершения игры:
Если черные вывели 15+ фишек и ход завершен → победа "Black"
Если белые вывели 15+ фишек и ход завершен → победа "White"
Возвращает цвет победителя или None если игра продолжается
update_game_state(game_state, was_move)

Управляет сменой ходов:
Отслеживает начало и завершение хода
Переключает индекс хода (0/1) между игроками
Сменяет цвет текущего игрока после двух бросков
Сбрасывает флаг броска кубиков
render_game(game_state, dec, skip_butt, cube)

Отрисовывает все игровые компоненты:
Фон доски
Кнопку пропуска хода
Все фишки на своих позициях
Кубики (если были брошены)
main_game_loop(game_state)
Основной игровой цикл:
Обработка событий ввода
Проверка условий победы
Обновление состояния игры
Отрисовка всех компонентов
Контроль FPS (60 кадров/сек)

Взаимодействие с другими модулями:
from Game import *: Использует классы GameState, Cube, SkipButton и другие игровые объекты
from Initer import *: Использует функцию init_bases() для начальной расстановки фишек

Роль в проекте:
Данный модуль является "движком" игры, который связывает логику (Game) с отображением (Pygame) и управляет потоком выполнения игрового процесса от начала до определения победителя.
------------------------------------------------------------------------------------------
Файл: Game.py
Назначение:
Основной модуль игровой логики. Содержит все классы и функции, определяющие правила игры, состояние игрового поля, взаимодействие фишек и баз, а также механику перемещений.

Основные классы:
GameState - центральный класс состояния игры
move_is_going: флаг выполнения текущего хода
move_color: цвет текущего игрока ("Black"/"White")
baseList: список всех баз на доске
cubes_num: результаты броска кубиков [число1, число2]
move_index: индекс текущего броска (0 или 1)
cubs_was_trow: флаг броска кубиков
count_of_black/white: счетчик выведенных фишек
Washer - класс игровой фишки
Атрибуты: цвет, позиция, принадлежность к базе, индекс в базе

Методы:
check_mouse_on_washer(): обработка наведения и клика мыши
change_base(): переход фишки на новую базу
move_to(): анимированное перемещение к целевой позиции
print_washer(): отрисовка фишки
Base - класс игровой базы (позиции на доске)
Атрибуты: координаты, номер, направление расстановки фишек ('Up'/'Down')

Методы:
add_washer(): добавление фишки на базу
pop_washer(): удаление фишки с базы
print_washers(): отрисовка всех фишек базы
SkipButton - класс кнопки пропуска хода
Реагирует на наведение мыши (увеличивается)
При клике вызывает смену хода через change_move()

Ключевые функции логики:
can_move(game_state, washer, count, index_of_base)
Проверяет возможность перемещения фишки по правилам нард:
Фишка должна принадлежать текущему игроку
Должна быть верхней в своей базе
Не должно быть активного перемещения
Проверка нахождения в доме (правило вывода фишек)

_check_target_base() - проверка целевой базы:
Пустая база - разрешено
База с фишками своего цвета - разрешено
База с одной фишкой противника - разрешено (выбивание)
База с 2+ фишками противника - запрещено
_knock_opponent_washer() - обработка выбивания фишки противника:
Перемещает выбитую фишку в "дом" противника
Обновляет позиционные параметры фишки
remove_from_game() - вывод фишки с доски:
Увеличивает счетчик выведенных фишек
Инициирует смену хода при необходимости

Особенности реализации:
Анимированное перемещение фишек с расчетом траектории
Визуальный feedback при наведении (увеличение фишек/кнопки)
Строгая проверка правил перемещения согласно классическим нардам
Разделение логики на мелкие функции для читаемости

Роль в проекте:
Данный модуль является ядром игры, содержащим всю бизнес-логику. Он полностью независим от графического интерфейса и может быть использован для реализации различных версий игры.
------------------------------------------------------------------------------------------
Файл: Cube.py
Назначение:
Модуль управления игровыми кубиками (зарами). Отвечает за визуализацию броска кубиков, анимацию процесса броска и генерацию случайных чисел для хода.

Основной класс:
Cube - класс игровых кубиков

Атрибуты:
imageE: изображение буквы "E" (подсказка для броска)
cube_list: список изображений граней кубиков (от 1 до 6)
first_сube, second_сube: индексы выпавших граней (0-5)

Методы:
throw_cubs(screen, clock)

Вход: экран для отрисовки и часы для контроля времени

Выход: список двух случайных чисел [first, second] от 1 до 6

Логика:
Создает анимацию броска (20 кадров)
В каждом кадре отрисовывает доску и "стакан" с эффектом тряски
Генерирует два случайных числа для кубиков
Сохраняет индексы для последующей отрисовки
prin_cube(screen, was_thrown)

Вход: экран и флаг, были ли кубики брошены

Логика:
Если кубики брошены - отрисовывает соответствующие изображения граней
Если не брошены - отрисовывает подсказку "E" в центре экрана

Визуальные эффекты:
Анимация броска: стакан с кубиками "трясется" за счет попеременного смещения позиции
Подсказка управления: буква "E" указывает на клавишу для броска
Размещение кубиков: отрисовываются в правом нижнем углу экрана

Особенности реализации:
Предзагрузка всех изображений граней кубиков при инициализации
Использование индексов (0-5) для доступа к изображениям из списка
Контроль частоты кадров анимации (15 FPS) для плавности
Интеграция с основным игровым циклом через флаг was_thrown

Роль в проекте:
Модуль обеспечивает интерактивный элемент игры - бросок кубиков, который является ключевым механизмом определения возможных ходов. Сочетает функциональность генерации случайных чисел с визуальной обратной связью для игрока.
------------------------------------------------------------------------------------------
Файл: Initer.py
Назначение:
Модуль инициализации игрового поля. Содержит функцию для создания и расстановки всех игровых баз и фишек в начальную позицию согласно правилам классических нард.

Основная функция:
init_bases(game_state) - создает и размещает все игровые объекты на доске

Логика расстановки баз:

Базовый дом (позиция 0):
Координаты: (550, 0)
Направление: "Down" (фишки ставятся сверху вниз)

Правая сторона доски (позиции 1-6):
Координаты: от (505, 510) до (290, 510) с шагом 37px
Направление: "Up" (фишки ставятся снизу вверх)

Правая середина доски (позиции 7-12):
Координаты: от (247, 510) до (35, 510) с шагом 37px
Направление: "Up"

Левая середина доски (позиции 13-18):
Координаты: от (60, 60) до (277, 60) с шагом 37px
Направление: "Down"
Левая сторона доски (позиции 19-24):
Координаты: от (320, 60) до (535, 60) с шагом 37px
Направление: "Down"

Дом противника (позиция 25):
Координаты: (0, 50)
Направление: "Down"

Начальная расстановка фишек:
Позиция 1: 2 черные фишки
Позиция 6: 5 белых фишек
Позиция 8: 3 белые фишки
Позиция 12: 5 черных фишек
Позиция 13: 5 белых фишек
Позиция 17: 3 черные фишки
Позиция 19: 5 черных фишек
Позиция 24: 2 белые фишки
Особенности реализации:
Использует математические формулы для точного позиционирования баз
Чередует направление расстановки фишек для разных сторон доски
Создает классическую стартовую позицию для игры в длинные нарды
Каждая фишка при создании получает ссылку на свою базу и корректный индекс

Роль в проекте:
Модуль выполняет роль "уровня дизайна" игры, определяя начальную конфигурацию игрового поля. Обеспечивает корректную подготовку игры к старту, создавая все необходимые объекты в правильных позициях.